from abc import ABC, abstractmethod, abstractproperty

from datetime import datetime
from xmlrpc.client import DateTime

#Não esta feito a tela de seleção.

class cliente:

    
    def __init__(self, endereço):
       self.endereço = endereço
       self.contas = []
    
    
    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)
      
    
    def adicionar_conta(self, conta):
        self.contas.append(conta)
     

class Pessoa_Fisica(cliente):
    
    def __init__(self, cpf, nome, data_nascimento, endereço):
        super().__init__(endereço)
        self.cpf = cpf
        self.nome = nome
        self. data_nascimento = data_nascimento


class Conta:
    def __init__(self,numero, cliente):
        self._saldo = 0
        self._numero = numero
        self._agencia = "0001"
        self._cliente = cliente
        self._historico = historico()


    @classmethod
    def nova_conta (cls, cliente, numero):
        return cls(numero, cliente)

    @property
    def saldo(self):
        return self._saldo
    
    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia
    
    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico
    
    def sacar(self, valor):
        saldo = self.saldo
        excedeu_saldo = valor > saldo

        if excedeu_saldo:
            print("Saldo insuficiente")
            return True

        elif valor > 0:
            self._saldo -= valor
            print("Valor sacado com sucesso!!")
        
        else:
            print("Algo de errado ai não ta certo, o valor esta incorreto")
            return False

    def depositar(self,valor):
        if valor > 0:
            self._saldo += valor
            print("Deposito foi depositadio com sucesoo {depositar}") 
        else:
            print("Deu ruim vacilão se vira")
            return False

        return True


class Conta_Corrente(Conta):
    def __init__(self, numero, cliente, limite = 500, limite_saques = 3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saques = limite_saques

    def sacar(self, valor):
        numero_saques = len(
            [transacao for transacao in self._historico.transacao if transacao ["tipo"] == Saque.__name__]

        )
        
        excedeu_limite = valor > self.limite
        excedeu_saques = numero_saques >= self.limite_saques

        if excedeu_limite:
            print("Não deu certo tente novamente, o valor insirido é maior que o limite """)
        
        elif excedeu_saques:
            print("Os numero de saques foi excedid..")
        
        else:
            return super().sacar(valor)
        
        return False

    def __str__(self):
        return f"""
            Agencia: {self.agencia}
            C/C : {self._numero}
            Titular: {self.cliente.nome}

        """
        

class historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        self._transacoes.append(
            {
                "tipo": transacao.__class__.__name__,
                "valor": transacao.valor,
                "data" :  DateTime.now().strftime
                ("%d-%m-%Y %H:%M:%s"),

            }

        )


class Transacao(ABC):

    @property
    @abstractmethod
    def valor(self):
        pass

    @abstractmethod
    def resgistrar(self, conta):
        pass 


class Saque(Transacao):
    def __init__(self, valor) -> None:
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def resgistrar(self, conta):
        sucesso_transacao = conta.sacar(self.valor)

        if sucesso_transacao:
            conta,historico.adicionar_transacao(self)


class deposito(Transacao):
        def __init__(self, valor):
            self._valor = valor

        @property
        def valor(self):
            return self._valor

        def resgistrar(self, conta):
            sucesso_transacao = conta.depositar(self.valor)
            
            if sucesso_transacao:
                conta.historico.adicionar_transacao(self)
